#!/usr/bin/env python3

import amulet
import requests
import unittest


class TestDeployment(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.deployment = amulet.Deployment(series='precise')

        cls.deployment.add('couchdb')

        try:
            cls.deployment.setup(timeout=900)
            cls.deployment.sentry.wait()
        except amulet.helpers.TimeoutError:
            amulet.raise_status(amulet.SKIP, msg="Environment wasn't stood up in time")
        except:
            raise

    def setUp(self):
        """
        Pseudocode:

        couch_ip = self.deployment['couchdb/0'].info['public-address']
        self.couch_host = 'http://{}:5984'.format(couch_ip)

        password = json.loads(self.deployment.leader_get("passwords"))['admin_pass']
        # TODO: lookup actual command for the above -- can we run leader-get from amulet?
        self.session = requests.Session(
            auth=('admin', password),
            headers={'content-type': 'application/json'})

        """

    def test_couch_is_running(self):
        """
        Verify that couch is responsive, and that it is returning the
        sorts of things we expect when passed basic requests.

        Pseudocode:

        # Verify that we get couch's friendly Welcome message.
        resp = self.session.get(self.couch_host)
        resp.raise_for_status()
        resp_json = resp.json()
        self.assertTrue('couchdb' in resp_json)
        self.assertTrue('version' in resp_json)

        # Verify that the default dbs exist.
        resp = self.session.get('{}/_all_dbs'.format(self.couch_host))
        resp.raise_for_status()
        self.assertTrue('_replicator' in resp_json)
        self.assertTrue('_users' in resp_json)

        """

    def test_create_db(self):
        """
        Verify that we can create a test database.

        Pseudocode:

        # Make a DB
        resp = self.session.post('{}/testdb'.format(self.couch_host))
        resp.raise_for_status()

        # Verify that the database was created
        resp = self.session.get('{}/_all_dbs'.format(self.couch_host))
        resp.raise_for_status()
        resp_json = resp.json()
        self.assertTrue('testdb' in resp_json)

        """

    def test_db_relation_joined(self):
        """
        Verify that we can connect to couch.

        Pseudocode

        self.deployment.add('some service that uses couch')
        self.deployent_sentry.wait()
        # TODO: make some requests to it that verify that we communited the
                password successfully, and that the service can connect.

        """

    def test_case_exemplar(self):
        # TODO: clean this up once other tests are written, and you
        # don't need it as a reference.

        # Now you can use self.deployment.sentry.unit[UNIT] to address each of
        # the units and perform more in-depth steps.  You can also reference
        # the first unit as self.unit.
        # There are three test statuses that can be triggered with
        # amulet.raise_status():
        #   - amulet.PASS
        #   - amulet.FAIL
        #   - amulet.SKIP
        # Each unit has the following methods:
        #   - .info - An array of the information of that unit from Juju
        #   - .file(PATH) - Get the details of a file on that unit
        #   - .file_contents(PATH) - Get plain text output of PATH file from that unit
        #   - .directory(PATH) - Get details of directory
        #   - .directory_contents(PATH) - List files and folders in PATH on that unit
        #   - .relation(relation, service:rel) - Get relation data from return service
        #          add tests here to confirm service is up and working properly
        # For example, to confirm that it has a functioning HTTP server:
        #     page = requests.get('http://{}'.format(self.unit.info['public-address']))
        #     page.raise_for_status()
        # More information on writing Amulet tests can be found at:
        #     https://juju.ubuntu.com/docs/tools-amulet.html
        pass



if __name__ == '__main__':
    unittest.main()
